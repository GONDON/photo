{"version":3,"sources":["photo/index.js","photo/use-checked.js","App.js","serviceWorker.js","index.js"],"names":["Page","pictures","id","name","url","data","useReducer","CheckedMapParams","action","type","payload","dataItem","checked","console","log","newCheckedAll","newCheckedMap","forEach","checkedMap","dispatch","checkedAll","length","Object","entries","filter","Boolean","map","checkedId","find","Number","onCheckChange","onCheckedAllChange","useChecked","onCheckAll","e","item","target","className","onChange","keys","key","onCheck","src","alt","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QA0EeA,G,MAtEF,WACX,IAAMC,EAAW,CACjB,CACEC,GAAI,IACJC,KAAM,MACNC,IAAK,yFAEP,CACEF,GAAI,IACJC,KAAM,MACNC,IAAK,yFAEP,CACEF,GAAI,IACJC,KAAM,MACNC,IAAK,0FAfU,ECGO,SAACC,EAAKH,GAAM,IAAD,EACFI,sBAAW,SAACC,EAAiBC,GACxD,OAAQA,EAAOC,MACf,IARe,iBAQO,IACZC,EAAYF,EAAZE,QACAC,EAAsBD,EAAtBC,SAAUC,EAAYF,EAAZE,QACVV,EAAOS,EAAPT,GAER,OADAW,QAAQC,IAAIZ,GACL,eACFK,EADL,eAEGL,EAAKU,IAGV,IAhBmB,qBAgBO,IACPG,EAAkBP,EAA3BE,QACFM,EAAgB,GAOtB,OALID,GACFV,EAAKY,SAAQ,SAAAN,GACXK,EAAcL,EAAST,KAAM,KAG1Bc,EAET,QACE,OAAOT,KAEX,IA3B+B,mBAC1BW,EAD0B,KACdC,EADc,KAkD7BC,EAA4B,IAAhBf,EAAKgB,QARnBC,OAAOC,QAAQL,GAEZM,QAAO,SAAAD,GAAO,OAAIE,QAAQF,EAAQ,OAElCG,KAAI,gBAAEC,EAAF,2BAAiBtB,EAAKuB,MAAK,qBAAG1B,KAAgB2B,OAAOF,SAITN,SAAWhB,EAAKgB,OAUvE,MAAO,CACLH,aACAC,WACAW,cAjCoB,SAACnB,EAAUC,GAC7BO,EAAS,CACPV,KArCe,iBAsCfC,QAAS,CACPC,WACAC,cA6BNQ,aACAW,mBAZyB,SAAChB,GAC1BI,EAAS,CACPV,KA1DqB,qBA2DrBC,QAASK,MDnCPiB,CAAW/B,GAJXiB,EApBW,EAoBXA,WACAY,EArBW,EAqBXA,cACAV,EAtBW,EAsBXA,WACAW,EAvBW,EAuBXA,mBAEEE,EAAa,SAACC,EAAEC,GAAQ,IAClBvB,EAAYsB,EAAEE,OAAdxB,QACRmB,EAAmBnB,IAoBzB,OADEC,QAAQC,IAAII,GAEZ,6BAjBM,yBAAKmB,UAAU,aACb,2BACIzB,QAASQ,EACTkB,SAAUL,EACVxB,KAAK,aAJX,eAOE,0BAAM4B,UAAU,QAAhB,4BAA8Bf,OAAOiB,KAAKrB,GAAYG,OAAtD,wBAYJ,yBACIgB,UAAU,YAGNpC,EAASyB,KAAI,SAAAS,GAAS,IACVjC,EAAgBiC,EAAhBjC,GAAGC,EAAagC,EAAbhC,KAAKC,EAAQ+B,EAAR/B,IACVQ,EAAUM,EAAWiB,EAAKjC,MAAO,EACvC,OACA,yBAAKsC,IAAKtC,GACN,2BAAOU,QAASA,EAASH,KAAK,WAAW6B,SAAU,SAACJ,IAjB1D,SAACA,EAAEC,GAAQ,IACjBvB,EAAYsB,EAAEE,OAAdxB,QACRkB,EAAcK,EAAKvB,GAe0D6B,CAAQP,EAAEC,MACnE,yBAAKO,IAAKtC,EAAKuC,IAAI,iBACnB,6BAAMxC,W,MErDfyC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcnB,QACW,cAA7BoB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.b30157b4.chunk.js","sourcesContent":["import React from \"react\";\nimport { useChecked } from \"./use-checked\"\nimport \"./index.css\"\n\nconst Page = () => {\n  const pictures = [\n  {\n    id: '1',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n  {\n    id: '2',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n  {\n    id: '3',\n    name: 'foo',\n    url: 'https://gw.alipayobjects.com/mdn/rms_d212b7/afts/img/A*LlfeSa8N0WgAAAAAAAAAAABkARQnAQ'\n  },\n];\n\n    const {\n        checkedMap,\n        onCheckChange,\n        checkedAll,\n        onCheckedAllChange\n    } = useChecked(pictures)\n    const onCheckAll = (e,item)=>{\n        const { checked } = e.target\n        onCheckedAllChange(checked)\n    }\n  const Head = ()=>{\n      return (\n          <div className=\"check-all\">\n            <input\n                checked={checkedAll}\n                onChange={onCheckAll}\n                type=\"checkbox\"\n            />\n            全选\n            <span className='span'>{`已选中${Object.keys(checkedMap).length}个商品`}</span>\n        </div>\n      )\n  }\n  const onCheck = (e,item)=>{\n    const { checked } = e.target\n    onCheckChange(item,checked)\n  }\n    console.log(checkedMap)\n  return (\n    <div>\n        {Head()}\n        <div \n            className='img-list'\n        >\n            {\n                pictures.map(item => {\n                    const { id,name,url } = item\n                    const checked = checkedMap[item.id] || false\n                    return (\n                    <div key={id} >\n                        <input checked={checked} type=\"checkbox\" onChange={(e)=>{onCheck(e,item)}}/>\n                        <img src={url} alt='图片'/>\n                        <div>{name}</div>\n                    </div>\n                )\n            })}\n        </div>\n    </div>\n  )\n};\n\nexport default Page","import { useReducer } from \"react\"\n//勾选\nconst CHECKED_CHANGE = \"CHECKED_CHANGE\"\n//全选\nconst CHECKED_ALL_CHANGE = \"CHECKED_ALL_CHANGE\"\n\n//勾选\nexport const useChecked = (data,id)=>{\n    const [checkedMap, dispatch] = useReducer((CheckedMapParams,action)=>{\n        switch (action.type) {\n        case CHECKED_CHANGE: {\n          const { payload } = action\n          const { dataItem, checked } = payload\n          const { id } = dataItem\n          console.log(id); // 输出用户选择图片 id。\n          return {\n            ...CheckedMapParams,\n            [id]: checked,\n          }\n        }\n        case CHECKED_ALL_CHANGE: {\n          const { payload: newCheckedAll } = action\n          const newCheckedMap = {}\n          // 全选\n          if (newCheckedAll) {\n            data.forEach(dataItem => {\n              newCheckedMap[dataItem.id] = true\n            })\n          }\n          return newCheckedMap\n        }\n        default:\n          return CheckedMapParams\n      }\n    },{},\n    )\n    //勾选变更\n    const onCheckChange=(dataItem, checked) => {\n      dispatch({\n        type: CHECKED_CHANGE,\n        payload: {\n          dataItem,\n          checked,\n        },\n      })\n    }\n\n  const filterChecked = () => {\n    return (\n      Object.entries(checkedMap)\n        // 通过这个filter 筛选出所有checked状态为true的项\n        .filter(entries => Boolean(entries[1]))\n        // 再从Data中根据id来map出选中列表\n        .map(([checkedId]) => data.find(({ id }) => id === Number(checkedId)))\n    )\n  }\n  /** 是否全选状态 */\n  const checkedAll =data.length !== 0 && filterChecked().length === data.length\n  \n  /** 全选反选函数 */\n  const onCheckedAllChange = (newCheckedAll) => {\n    dispatch({\n      type: CHECKED_ALL_CHANGE,\n      payload: newCheckedAll,\n    })\n  }\n\n  return {\n    checkedMap,\n    dispatch,\n    onCheckChange,\n    checkedAll,\n    onCheckedAllChange,\n  }\n}","import React from 'react';\nimport Photo from './photo'\nimport './App.css';\n\nfunction App(){\n  return (\n    <div>\n      <Photo />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}